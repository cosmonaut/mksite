#!/bin/sh
NAME=""
EXT=md
FMT=markdown
LC_ALL=en_US.UTF-8
PATH=/bin:/usr/bin:/usr/local/bin
ABSPATH=""
PREFIX="/"
FOOTER=""
REBUILD=1
CLEAN=1
export LC_ALL PATH

usage() {
    cat <<EOF
Usage: mksite <site dir> [OPTIONS]

Options:
  -h, -help, --help    display this message and exit
  --clean              Removes html files in output that 
                       don't match markdown files in input
  --rebuild            Completely rebuild the site: All
                       html files are regenerated. The cache
                       is rebuilt. This option also implies
                       --clean.

EOF
}

menu() {
    for i in `ls -F $1 | grep -v index.$EXT | sort`
    do
        case $i in
            *.$EXT)
                base=`echo $i | sed "s/.\$EXT$//"`
                cleanbase=`echo $base | sed 's/_/ /g'`
                if test "x$base" = "x$2"
                then
                    echo "<li class='current'><a href='$base.html'>$cleanbase</a></li>"
                else
                    echo "<li><a href='$base.html'>$cleanbase</a></li>"
                fi
                cur=1
                ;;
            */)
                echo "<li><a href='$i'>$i</a></li>"
                ;;
        esac
    done
    cat <<END
                </ul>
                </div>
END
}

page() {
        mtime=`ls -l --time-style=long-iso $1$2.$EXT | awk '{ print $6 }'`
        title=`echo $4 | sed 's/.html//'`
        cat <<END
<!DOCTYPE HTML>
<html>
<head>
        <meta charset="utf-8">
        <title>$title</title>
        <link type="text/css" rel="stylesheet" href="${PREFIX}style.css"/>
        <link rel="icon" type="image/png" href="${PREFIX}favicon.ico"/>
</head>
<body>
<div id="container">
        <div id="main">
                <div id="path">$3</a></div>
                <div id="menu">
                <ul>
END
        menu $1 $2
cat <<END
                <div id="content">
END

        $FMT $1$2.$EXT
        cat <<END
                </div>
        </div>
        <div id="footer">
                $FOOTER &nbsp;&middot;&nbsp; <a href="http://validator.w3.org/check?uri=referer">Validate</a> &nbsp;&middot;&nbsp; generated: $mtime
        </div>
</div>
</body></html>
END
}

cached() {
    exists=1
    while read line; do
        linea=(${line// / })
        sha=`sha1sum $1`
        sha=(${sha// / })
        if [ ${linea[1]} == $1 ]
        then
            if [ ${linea[0]} == ${sha[0]} ]; then
                exists=0
                break
            else
                sed -i "\|^$line\$|d" $ABSPATH/.cache
            fi
        fi
    done < $ABSPATH/.cache

    if [ $exists -eq 1 ]; then
        echo `sha1sum $1` >> $ABSPATH/.cache
        return 1
    else
        return 0
    fi
}

clean_cache() {
    echo ""
    echo "Cleaning cache"

    while read line; do
        linea=(${line// / })
        if [ ! -e ${linea[1]} ]; then
            sed -i "\|^$line\$|d" $ABSPATH/.cache
        fi
    done < $ABSPATH/.cache
}

clean_html() {
    echo ""
    echo "Cleaning output"

    exists=1
    for i in `find . \( ! -regex '.*/\..*' \) -type f -name \*.html`; do
        case $i in
            *.html)
                #Check against cache.

                while read line; do
                    linea=(${line// / })
                    f=`echo ${linea[1]} | awk 'sub("..$", "")'`
                    f=$f"html"

                    if [ $i == $f ]; then
                        exists=0
                        break
                    fi
                done < $ABSPATH/.cache

                if [ $exists -eq 1 ]; then
                    rm -f $i
                fi
                exists=1
                ;;
            *)
                ;;
        esac
    done
}

process() {
    for i in `ls -F $1`
    do
        case $i in
            *.$EXT)
                echo processing $1$i
                if [ $REBUILD -eq 0 ]; then
                    echo `sha1sum $1$i` >> $ABSPATH/.cache
                    base=`echo $i | sed "s/.\$EXT$//"`
                    if test x$base = xindex
                    then
                        title=$3
                    else
                        title=$3$base.html
                    fi
                    page "$1" "$base" "$2" "$title" > "../output/$1$base.html"
                else
                    cached $1$i
                    if [ $? -eq 1 ]; then
                        base=`echo $i | sed "s/.\$EXT$//"`
                        if test x$base = xindex
                        then
                            title=$3
                        else
                            title=$3$base.html
                        fi
                        page "$1" "$base" "$2" "$title" > "../output/$1$base.html"
                    fi
                fi
                ;;
                */)
                    process "$1$i" "$2</a> <a href='$PREFIX${1#??}$i'>$i" $3$i
                    ;;
                *)
                    ;;
        esac
    done
}

for args; do
    case $args in
        --rebuild|-r)
            REBUILD=0
            CLEAN=0
            ;;
        --clean|-c)
            CLEAN=0
            ;;
        --help|-help|-h)
            usage
            exit
            ;;
    esac
done

if [ -d $1 ]
then
    ABSPATH=`readlink -f $1`
else
    echo "No project directory given"
    echo "Usage: mksite <project dir>"
    exit 1
fi

if test $1
then
    mkdir -p $1/output
    if [ -e $1/config.conf ]
    then
        source $1/config.conf
    else
        echo "WARNING: Config file not found!"
        echo "Please create config.conf in project dir"
        echo "to configure site name and footer"
    fi
    if [ ! -e $1/.cache ]
    then
        touch $1/.cache
    fi
    cd $1/input
fi

if [ $REBUILD -eq 1 ]; then
    rsync -av \
        --progress \
        --exclude=*.md \
        --exclude=*~ \
        --exclude=*.html \
        --delete-after \
        . ../output/
else
    rm -f $ABSPATH/.cache
    touch $ABSPATH/.cache
    rsync -av \
        --progress \
        --exclude=*.md \
        --exclude=*~ \
        --exclude=*.html \
        --delete-excluded \
        . ../output/
fi

echo ""
echo ""

find . -type l | xargs rm -f
process "./" "<a href='$PREFIX'>$NAME/" /

clean_cache

if [ $CLEAN -eq 0 ]; then
    # Clean html files that don't match input dir
    cd ../output
    clean_html
fi
